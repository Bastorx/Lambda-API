{
  "tags": [
    {
      "name": "Car"
    },
    {
      "name": "Customer"
    },
    {
      "name": "Inventory"
    },
    {
      "name": "Location"
    },
    {
      "name": "Note"
    }
  ],
  "definitions": {
    "Note": {
      "additionalProperties": false,
      "required": [],
      "properties": {
        "id": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "x-any": {
      "properties": {}
    },
    "RoleMapping": {
      "additionalProperties": false,
      "required": [],
      "properties": {
        "roleId": {
          "format": "double",
          "type": "number"
        },
        "principalId": {
          "type": "string"
        },
        "principalType": {
          "type": "string",
          "description": "The principal type, such as user, application, or role"
        },
        "id": {
          "format": "double",
          "type": "number"
        }
      },
      "description": "Map principals to roles"
    },
    "Role": {
      "additionalProperties": false,
      "required": [
        "name"
      ],
      "properties": {
        "modified": {
          "format": "date",
          "type": "string"
        },
        "created": {
          "format": "date",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "required": true
        },
        "id": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "AccessToken": {
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "userId": {
          "type": "string"
        },
        "created": {
          "format": "date",
          "type": "string"
        },
        "ttl": {
          "format": "double",
          "type": "number",
          "description": "time to live in seconds (2 weeks by default)",
          "default": 1209600
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Inventory": {
      "additionalProperties": false,
      "required": [
        "id",
        "productId",
        "locationId"
      ],
      "properties": {
        "total": {
          "format": "double",
          "type": "number",
          "length": 22
        },
        "available": {
          "format": "double",
          "type": "number",
          "length": 22
        },
        "locationId": {
          "type": "string",
          "length": 20,
          "required": true
        },
        "productId": {
          "type": "string",
          "length": 20,
          "required": true
        },
        "id": {
          "type": "string",
          "length": 20,
          "required": true
        }
      }
    },
    "Car": {
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "color": {
          "type": "string"
        },
        "carClass": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "make": {
          "type": "string"
        },
        "year": {
          "format": "double",
          "type": "number"
        },
        "vin": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Customer": {
      "additionalProperties": false,
      "required": [
        "id",
        "email"
      ],
      "properties": {
        "lastUpdated": {
          "format": "date",
          "type": "string"
        },
        "created": {
          "format": "date",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "verificationToken": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "length": 20
        },
        "name": {
          "type": "string",
          "length": 40
        },
        "realm": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "credentials": {
          "type": "object"
        },
        "challenges": {
          "type": "object"
        },
        "email": {
          "type": "string",
          "required": true
        },
        "emailVerified": {
          "type": "boolean"
        }
      }
    },
    "Location": {
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "geo": {
          "$ref": "#/definitions/GeoPoint"
        },
        "name": {
          "type": "string",
          "length": 32
        },
        "zipcode": {
          "format": "double",
          "type": "number",
          "length": 20
        },
        "city": {
          "type": "string",
          "length": 64
        },
        "street": {
          "type": "string",
          "length": 64
        },
        "id": {
          "type": "string",
          "length": 20
        }
      }
    }
  },
  "paths": {
    "/notes/change-stream": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "query",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.createChangeStream",
        "summary": "Create a change stream.",
        "tags": [
          "Note"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "formData",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.createChangeStream",
        "summary": "Create a change stream.",
        "tags": [
          "Note"
        ]
      }
    },
    "/notes/count": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.count",
        "summary": "Count instances of the model matched by where from the data source.",
        "tags": [
          "Note"
        ]
      }
    },
    "/notes/update": {
      "post": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          },
          {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "required": false,
            "description": "An object of model property name/value pairs",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.updateAll",
        "summary": "Update instances of the model matched by where from the data source.",
        "tags": [
          "Note"
        ]
      }
    },
    "/notes/findOne": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.findOne",
        "summary": "Find first instance of the model matched by filter from the data source.",
        "tags": [
          "Note"
        ]
      }
    },
    "/notes/{id}": {
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "required": false,
            "description": "An object of model property name/value pairs",
            "in": "body",
            "name": "data"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "PersistedModel id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.prototype.updateAttributes",
        "summary": "Update attributes for a model instance and persist it into the data source.",
        "tags": [
          "Note"
        ]
      },
      "delete": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.deleteById",
        "summary": "Delete a model instance by id from the data source.",
        "tags": [
          "Note"
        ]
      },
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields and include",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.findById",
        "summary": "Find a model instance by id from the data source.",
        "tags": [
          "Note"
        ]
      },
      "head": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.exists",
        "summary": "Check whether a model instance exists in the data source.",
        "tags": [
          "Note"
        ]
      }
    },
    "/notes/{id}/exists": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.exists",
        "summary": "Check whether a model instance exists in the data source.",
        "tags": [
          "Note"
        ]
      }
    },
    "/notes": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Note"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.find",
        "summary": "Find all instances of the model matched by filter from the data source.",
        "tags": [
          "Note"
        ]
      },
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "required": false,
            "description": "Model instance data",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.upsert",
        "summary": "Update an existing model instance or insert a new one into the data source.",
        "tags": [
          "Note"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "required": false,
            "description": "Model instance data",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Note.create",
        "summary": "Create a new instance of the model and persist it into the data source.",
        "tags": [
          "Note"
        ]
      }
    },
    "/Locations/nearby": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/x-any"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "geo location (lng & lat)",
            "in": "query",
            "name": "here"
          },
          {
            "format": "double",
            "type": "number",
            "required": false,
            "description": "number of pages (page size=10)",
            "in": "query",
            "name": "page"
          },
          {
            "format": "double",
            "type": "number",
            "required": false,
            "description": "max distance in miles",
            "in": "query",
            "name": "max"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.nearby",
        "summary": "Find nearby locations around the geo point",
        "tags": [
          "Location"
        ]
      }
    },
    "/Locations/change-stream": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "query",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.createChangeStream",
        "summary": "Create a change stream.",
        "tags": [
          "Location"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "formData",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.createChangeStream",
        "summary": "Create a change stream.",
        "tags": [
          "Location"
        ]
      }
    },
    "/Locations/count": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.count",
        "summary": "Count instances of the model matched by where from the data source.",
        "tags": [
          "Location"
        ]
      }
    },
    "/Locations/update": {
      "post": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          },
          {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "required": false,
            "description": "An object of model property name/value pairs",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.updateAll",
        "summary": "Update instances of the model matched by where from the data source.",
        "tags": [
          "Location"
        ]
      }
    },
    "/Locations/findOne": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.findOne",
        "summary": "Find first instance of the model matched by filter from the data source.",
        "tags": [
          "Location"
        ]
      }
    },
    "/Locations/{id}": {
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "required": false,
            "description": "An object of model property name/value pairs",
            "in": "body",
            "name": "data"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Location id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.prototype.updateAttributes",
        "summary": "Update attributes for a model instance and persist it into the data source.",
        "tags": [
          "Location"
        ]
      },
      "delete": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.deleteById",
        "summary": "Delete a model instance by id from the data source.",
        "tags": [
          "Location"
        ]
      },
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields and include",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.findById",
        "summary": "Find a model instance by id from the data source.",
        "tags": [
          "Location"
        ]
      },
      "head": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.exists",
        "summary": "Check whether a model instance exists in the data source.",
        "tags": [
          "Location"
        ]
      }
    },
    "/Locations/{id}/exists": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.exists",
        "summary": "Check whether a model instance exists in the data source.",
        "tags": [
          "Location"
        ]
      }
    },
    "/Customers/count": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.count",
        "summary": "Count instances of the model matched by where from the data source.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/update": {
      "post": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          },
          {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "required": false,
            "description": "An object of model property name/value pairs",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.updateAll",
        "summary": "Update instances of the model matched by where from the data source.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/findOne": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.findOne",
        "summary": "Find first instance of the model matched by filter from the data source.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/{id}": {
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "required": false,
            "description": "An object of model property name/value pairs",
            "in": "body",
            "name": "data"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "User id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.prototype.updateAttributes",
        "summary": "Update attributes for a model instance and persist it into the data source.",
        "tags": [
          "Customer"
        ]
      },
      "delete": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.deleteById",
        "summary": "Delete a model instance by id from the data source.",
        "tags": [
          "Customer"
        ]
      },
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields and include",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.findById",
        "summary": "Find a model instance by id from the data source.",
        "tags": [
          "Customer"
        ]
      },
      "head": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.exists",
        "summary": "Check whether a model instance exists in the data source.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/{id}/exists": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.exists",
        "summary": "Check whether a model instance exists in the data source.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Customer"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.find",
        "summary": "Find all instances of the model matched by filter from the data source.",
        "tags": [
          "Customer"
        ]
      },
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "required": false,
            "description": "Model instance data",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.upsert",
        "summary": "Update an existing model instance or insert a new one into the data source.",
        "tags": [
          "Customer"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "required": false,
            "description": "Model instance data",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.create",
        "summary": "Create a new instance of the model and persist it into the data source.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/{id}/accessTokens/count": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "User id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.prototype.__count__accessTokens",
        "summary": "Counts accessTokens of Customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/{id}/accessTokens": {
      "delete": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "User id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.prototype.__delete__accessTokens",
        "summary": "Deletes all accessTokens of this model.",
        "tags": [
          "Customer"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "required": false,
            "in": "body",
            "name": "data"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "User id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.prototype.__create__accessTokens",
        "summary": "Creates a new instance in accessTokens of this model.",
        "tags": [
          "Customer"
        ]
      },
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AccessToken"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "query",
            "name": "filter"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "User id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.prototype.__get__accessTokens",
        "summary": "Queries accessTokens of Customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Cars": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Car"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.find",
        "summary": "Find all instances of the model matched by filter from the data source.",
        "tags": [
          "Car"
        ]
      },
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "required": false,
            "description": "Model instance data",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.upsert",
        "summary": "Update an existing model instance or insert a new one into the data source.",
        "tags": [
          "Car"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "required": false,
            "description": "Model instance data",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.create",
        "summary": "Create a new instance of the model and persist it into the data source.",
        "tags": [
          "Car"
        ]
      }
    },
    "/Cars/{id}/exists": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.exists",
        "summary": "Check whether a model instance exists in the data source.",
        "tags": [
          "Car"
        ]
      }
    },
    "/Cars/{id}": {
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "required": false,
            "description": "An object of model property name/value pairs",
            "in": "body",
            "name": "data"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "PersistedModel id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.prototype.updateAttributes",
        "summary": "Update attributes for a model instance and persist it into the data source.",
        "tags": [
          "Car"
        ]
      },
      "delete": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.deleteById",
        "summary": "Delete a model instance by id from the data source.",
        "tags": [
          "Car"
        ]
      },
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields and include",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.findById",
        "summary": "Find a model instance by id from the data source.",
        "tags": [
          "Car"
        ]
      },
      "head": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.exists",
        "summary": "Check whether a model instance exists in the data source.",
        "tags": [
          "Car"
        ]
      }
    },
    "/Cars/findOne": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.findOne",
        "summary": "Find first instance of the model matched by filter from the data source.",
        "tags": [
          "Car"
        ]
      }
    },
    "/Cars/update": {
      "post": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          },
          {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "required": false,
            "description": "An object of model property name/value pairs",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.updateAll",
        "summary": "Update instances of the model matched by where from the data source.",
        "tags": [
          "Car"
        ]
      }
    },
    "/Cars/count": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.count",
        "summary": "Count instances of the model matched by where from the data source.",
        "tags": [
          "Car"
        ]
      }
    },
    "/Cars/change-stream": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "query",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.createChangeStream",
        "summary": "Create a change stream.",
        "tags": [
          "Car"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "formData",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Car.createChangeStream",
        "summary": "Create a change stream.",
        "tags": [
          "Car"
        ]
      }
    },
    "/Customers/{id}/accessTokens/{fk}": {
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Foreign key for accessTokens",
            "in": "path",
            "name": "fk"
          },
          {
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "required": false,
            "in": "body",
            "name": "data"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "User id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.prototype.__updateById__accessTokens",
        "summary": "Update a related item by id for accessTokens.",
        "tags": [
          "Customer"
        ]
      },
      "delete": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Foreign key for accessTokens",
            "in": "path",
            "name": "fk"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "User id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.prototype.__destroyById__accessTokens",
        "summary": "Delete a related item by id for accessTokens.",
        "tags": [
          "Customer"
        ]
      },
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Foreign key for accessTokens",
            "in": "path",
            "name": "fk"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "User id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.prototype.__findById__accessTokens",
        "summary": "Find a related item by id for accessTokens.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/change-stream": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "query",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.createChangeStream",
        "summary": "Create a change stream.",
        "tags": [
          "Customer"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "formData",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.createChangeStream",
        "summary": "Create a change stream.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/login": {
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "description": "The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n  - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n\n"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "object",
              "required": true
            },
            "required": true,
            "in": "body",
            "name": "credentials"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Related objects to include in the response. See the description of return value for more details.",
            "in": "query",
            "name": "include"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.login",
        "summary": "Login a user with username/email and password.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/logout": {
      "post": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.logout",
        "summary": "Logout a user with access token",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/confirm": {
      "get": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "name": "uid"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "name": "token"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "redirect"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.confirm",
        "summary": "Confirm a user registration with email verification token",
        "tags": [
          "Customer"
        ]
      }
    },
    "/Customers/reset": {
      "post": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "object",
              "required": true
            },
            "required": true,
            "in": "body",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Customer.resetPassword",
        "summary": "Reset password for a user with email",
        "tags": [
          "Customer"
        ]
      }
    },
    "/inventory": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Inventory"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.find",
        "summary": "Find all instances of the model matched by filter from the data source.",
        "tags": [
          "Inventory"
        ]
      },
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "description": "Model instance data",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.upsert",
        "summary": "Update an existing model instance or insert a new one into the data source.",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "description": "Model instance data",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.create",
        "summary": "Create a new instance of the model and persist it into the data source.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/{id}/exists": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.exists",
        "summary": "Check whether a model instance exists in the data source.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/{id}": {
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "description": "An object of model property name/value pairs",
            "in": "body",
            "name": "data"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "PersistedModel id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.prototype.updateAttributes",
        "summary": "Update attributes for a model instance and persist it into the data source.",
        "tags": [
          "Inventory"
        ]
      },
      "delete": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.deleteById",
        "summary": "Delete a model instance by id from the data source.",
        "tags": [
          "Inventory"
        ]
      },
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields and include",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.findById",
        "summary": "Find a model instance by id from the data source.",
        "tags": [
          "Inventory"
        ]
      },
      "head": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Model id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.exists",
        "summary": "Check whether a model instance exists in the data source.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/findOne": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.findOne",
        "summary": "Find first instance of the model matched by filter from the data source.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/update": {
      "post": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          },
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "description": "An object of model property name/value pairs",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.updateAll",
        "summary": "Update instances of the model matched by where from the data source.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/count": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.count",
        "summary": "Count instances of the model matched by where from the data source.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/change-stream": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "query",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.createChangeStream",
        "summary": "Create a change stream.",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "formData",
            "name": "options"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Inventory.createChangeStream",
        "summary": "Create a change stream.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/Locations/{id}/inventory/{fk}": {
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Foreign key for inventory",
            "in": "path",
            "name": "fk"
          },
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "in": "body",
            "name": "data"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Location id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.prototype.__updateById__inventory",
        "summary": "Update a related item by id for inventory.",
        "tags": [
          "Location"
        ]
      },
      "delete": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Foreign key for inventory",
            "in": "path",
            "name": "fk"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Location id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.prototype.__destroyById__inventory",
        "summary": "Delete a related item by id for inventory.",
        "tags": [
          "Location"
        ]
      },
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Foreign key for inventory",
            "in": "path",
            "name": "fk"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Location id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.prototype.__findById__inventory",
        "summary": "Find a related item by id for inventory.",
        "tags": [
          "Location"
        ]
      }
    },
    "/Locations/{id}/inventory": {
      "delete": {
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Location id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.prototype.__delete__inventory",
        "summary": "Deletes all inventory of this model.",
        "tags": [
          "Location"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "in": "body",
            "name": "data"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Location id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.prototype.__create__inventory",
        "summary": "Creates a new instance in inventory of this model.",
        "tags": [
          "Location"
        ]
      },
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Inventory"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "in": "query",
            "name": "filter"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Location id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.prototype.__get__inventory",
        "summary": "Queries inventory of Location.",
        "tags": [
          "Location"
        ]
      }
    },
    "/Locations/{id}/inventory/count": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": true,
            "description": "Location id",
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.prototype.__count__inventory",
        "summary": "Counts inventory of Location.",
        "tags": [
          "Location"
        ]
      }
    },
    "/Locations": {
      "get": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Location"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query",
            "name": "filter"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.find",
        "summary": "Find all instances of the model matched by filter from the data source.",
        "tags": [
          "Location"
        ]
      },
      "put": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "required": false,
            "description": "Model instance data",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.upsert",
        "summary": "Update an existing model instance or insert a new one into the data source.",
        "tags": [
          "Location"
        ]
      },
      "post": {
        "deprecated": false,
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "required": false,
            "description": "Model instance data",
            "in": "body",
            "name": "data"
          }
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "operationId": "Location.create",
        "summary": "Create a new instance of the model and persist it into the data source.",
        "tags": [
          "Location"
        ]
      }
    }
  },
  "produces": [
    "application/json",
    "application/xml",
    "text/xml",
    "application/javascript",
    "text/javascript"
  ],
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded",
    "application/xml",
    "text/xml"
  ],
  "basePath": "/api",
  "info": {
    "title": "loopback-example-app",
    "version": "3.1.0"
  },
  "swagger": "2.0"
}
