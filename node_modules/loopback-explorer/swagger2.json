{
  "host": "localhost:3000",
  "definitions": {
    "any": {
      "properties": {}
    },
    "object": {
      "properties": {}
    },
    "Note": {
      "properties": {
        "id": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "Location": {
      "properties": {
        "geo": {
          "$ref": "#/definitions/GeoPoint"
        },
        "name": {
          "$ref": "#/definitions/String"
        },
        "zipcode": {
          "$ref": "#/definitions/Number"
        },
        "city": {
          "$ref": "#/definitions/String"
        },
        "street": {
          "$ref": "#/definitions/String"
        },
        "id": {
          "$ref": "#/definitions/String"
        }
      },
      "required": [
        "id"
      ]
    },
    "Inventory": {
      "properties": {
        "total": {
          "$ref": "#/definitions/Number"
        },
        "available": {
          "$ref": "#/definitions/Number"
        },
        "locationId": {
          "type": "string"
        },
        "productId": {
          "$ref": "#/definitions/String"
        },
        "id": {
          "$ref": "#/definitions/String"
        }
      },
      "required": [
        "id",
        "productId",
        "locationId"
      ]
    },
    "AccessToken": {
      "properties": {
        "userId": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/Date"
        },
        "ttl": {
          "description": "time to live in seconds (2 weeks by default)",
          "default": 1209600,
          "format": "double",
          "type": "number"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "Customer": {
      "properties": {
        "lastUpdated": {
          "format": "date",
          "type": "string"
        },
        "created": {
          "format": "date",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "verificationToken": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/String"
        },
        "name": {
          "$ref": "#/definitions/String"
        },
        "realm": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "credentials": {
          "type": "object"
        },
        "challenges": {
          "type": "object"
        },
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "Car": {
      "properties": {
        "color": {
          "type": "string"
        },
        "carClass": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "make": {
          "type": "string"
        },
        "year": {
          "format": "double",
          "type": "number"
        },
        "vin": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    }
  },
  "paths": {
    "/notes/change-stream": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReadableStream"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "options",
            "in": "query"
          }
        ],
        "summary": "Create a change stream.",
        "operationId": "createChangeStream",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReadableStream"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "options",
            "in": "formData"
          }
        ],
        "summary": "Create a change stream.",
        "operationId": "createChangeStream",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/notes/count": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "format": "double",
              "type": "number"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          }
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "count",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/notes/update": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          },
          {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "required": false,
            "name": "data",
            "description": "An object of model property name/value pairs",
            "in": "body"
          }
        ],
        "summary": "Update instances of the model matched by where from the data source.",
        "operationId": "updateAll",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/notes/findOne": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query"
          }
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "findOne",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/notes/{id}": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "required": false,
            "name": "data",
            "description": "An object of model property name/value pairs",
            "in": "body"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "PersistedModel id",
            "in": "path"
          }
        ],
        "summary": "Update attributes for a model instance and persist it into the data source.",
        "operationId": "prototype.updateAttributes",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Delete a model instance by id from the data source.",
        "operationId": "deleteById",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields and include",
            "in": "query"
          }
        ],
        "summary": "Find a model instance by id from the data source.",
        "operationId": "findById",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "head": {
        "responses": {
          "200": {
            "schema": {
              "type": "boolean"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "exists",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/notes/{id}/exists": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "type": "boolean"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "exists",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/notes": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Note"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query"
          }
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "find",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "required": false,
            "name": "data",
            "description": "Model instance data",
            "in": "body"
          }
        ],
        "summary": "Update an existing model instance or insert a new one into the data source.",
        "operationId": "upsert",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Note"
            },
            "required": false,
            "name": "data",
            "description": "Model instance data",
            "in": "body"
          }
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "create",
        "tags": [
          "notes"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations/nearby": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "#/definitions/GeoPoint",
            "type": "string",
            "required": true,
            "name": "here",
            "description": "geo location (lng & lat)",
            "in": "query"
          },
          {
            "type": "number",
            "required": false,
            "name": "page",
            "description": "number of pages (page size=10)",
            "in": "query"
          },
          {
            "type": "number",
            "required": false,
            "name": "max",
            "description": "max distance in miles",
            "in": "query"
          }
        ],
        "summary": "Find nearby locations around the geo point",
        "operationId": "nearby",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations/change-stream": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReadableStream"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "options",
            "in": "query"
          }
        ],
        "summary": "Create a change stream.",
        "operationId": "createChangeStream",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReadableStream"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "options",
            "in": "formData"
          }
        ],
        "summary": "Create a change stream.",
        "operationId": "createChangeStream",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations/count": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "format": "double",
              "type": "number"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          }
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "count",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations/update": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          },
          {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "required": false,
            "name": "data",
            "description": "An object of model property name/value pairs",
            "in": "body"
          }
        ],
        "summary": "Update instances of the model matched by where from the data source.",
        "operationId": "updateAll",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations/findOne": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query"
          }
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "findOne",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations/{id}": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "required": false,
            "name": "data",
            "description": "An object of model property name/value pairs",
            "in": "body"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Location id",
            "in": "path"
          }
        ],
        "summary": "Update attributes for a model instance and persist it into the data source.",
        "operationId": "prototype.updateAttributes",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Delete a model instance by id from the data source.",
        "operationId": "deleteById",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields and include",
            "in": "query"
          }
        ],
        "summary": "Find a model instance by id from the data source.",
        "operationId": "findById",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "head": {
        "responses": {
          "200": {
            "schema": {
              "type": "boolean"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "exists",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations/{id}/exists": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "type": "boolean"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "exists",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/count": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "format": "double",
              "type": "number"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          }
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "count",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/update": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          },
          {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "required": false,
            "name": "data",
            "description": "An object of model property name/value pairs",
            "in": "body"
          }
        ],
        "summary": "Update instances of the model matched by where from the data source.",
        "operationId": "updateAll",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/findOne": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query"
          }
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "findOne",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/{id}": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "required": false,
            "name": "data",
            "description": "An object of model property name/value pairs",
            "in": "body"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "User id",
            "in": "path"
          }
        ],
        "summary": "Update attributes for a model instance and persist it into the data source.",
        "operationId": "prototype.updateAttributes",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Delete a model instance by id from the data source.",
        "operationId": "deleteById",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields and include",
            "in": "query"
          }
        ],
        "summary": "Find a model instance by id from the data source.",
        "operationId": "findById",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "head": {
        "responses": {
          "200": {
            "schema": {
              "type": "boolean"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "exists",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/{id}/exists": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "type": "boolean"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "exists",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Customer"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query"
          }
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "find",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "required": false,
            "name": "data",
            "description": "Model instance data",
            "in": "body"
          }
        ],
        "summary": "Update an existing model instance or insert a new one into the data source.",
        "operationId": "upsert",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "required": false,
            "name": "data",
            "description": "Model instance data",
            "in": "body"
          }
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "create",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/{id}/accessTokens/count": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "format": "double",
              "type": "number"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "User id",
            "in": "path"
          }
        ],
        "summary": "Counts accessTokens of Customer.",
        "operationId": "prototype.__count__accessTokens",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/{id}/accessTokens": {
      "delete": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "User id",
            "in": "path"
          }
        ],
        "summary": "Deletes all accessTokens of this model.",
        "operationId": "prototype.__delete__accessTokens",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "required": false,
            "name": "data",
            "in": "body"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "User id",
            "in": "path"
          }
        ],
        "summary": "Creates a new instance in accessTokens of this model.",
        "operationId": "prototype.__create__accessTokens",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/AccessToken"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "User id",
            "in": "path"
          }
        ],
        "summary": "Queries accessTokens of Customer.",
        "operationId": "prototype.__get__accessTokens",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Cars": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Car"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query"
          }
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "find",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "required": false,
            "name": "data",
            "description": "Model instance data",
            "in": "body"
          }
        ],
        "summary": "Update an existing model instance or insert a new one into the data source.",
        "operationId": "upsert",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "required": false,
            "name": "data",
            "description": "Model instance data",
            "in": "body"
          }
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "create",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Cars/{id}/exists": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "type": "boolean"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "exists",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Cars/{id}": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "required": false,
            "name": "data",
            "description": "An object of model property name/value pairs",
            "in": "body"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "PersistedModel id",
            "in": "path"
          }
        ],
        "summary": "Update attributes for a model instance and persist it into the data source.",
        "operationId": "prototype.updateAttributes",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Delete a model instance by id from the data source.",
        "operationId": "deleteById",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields and include",
            "in": "query"
          }
        ],
        "summary": "Find a model instance by id from the data source.",
        "operationId": "findById",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "head": {
        "responses": {
          "200": {
            "schema": {
              "type": "boolean"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "exists",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Cars/findOne": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query"
          }
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "findOne",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Cars/update": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          },
          {
            "schema": {
              "$ref": "#/definitions/Car"
            },
            "required": false,
            "name": "data",
            "description": "An object of model property name/value pairs",
            "in": "body"
          }
        ],
        "summary": "Update instances of the model matched by where from the data source.",
        "operationId": "updateAll",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Cars/count": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "format": "double",
              "type": "number"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          }
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "count",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Cars/change-stream": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReadableStream"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "options",
            "in": "query"
          }
        ],
        "summary": "Create a change stream.",
        "operationId": "createChangeStream",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReadableStream"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "options",
            "in": "formData"
          }
        ],
        "summary": "Create a change stream.",
        "operationId": "createChangeStream",
        "tags": [
          "Cars"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/{id}/accessTokens/{fk}": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "fk",
            "description": "Foreign key for accessTokens",
            "in": "path"
          },
          {
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "required": false,
            "name": "data",
            "in": "body"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "User id",
            "in": "path"
          }
        ],
        "summary": "Update a related item by id for accessTokens.",
        "operationId": "prototype.__updateById__accessTokens",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "fk",
            "description": "Foreign key for accessTokens",
            "in": "path"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "User id",
            "in": "path"
          }
        ],
        "summary": "Delete a related item by id for accessTokens.",
        "operationId": "prototype.__destroyById__accessTokens",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "fk",
            "description": "Foreign key for accessTokens",
            "in": "path"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "User id",
            "in": "path"
          }
        ],
        "summary": "Find a related item by id for accessTokens.",
        "operationId": "prototype.__findById__accessTokens",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/change-stream": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReadableStream"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "options",
            "in": "query"
          }
        ],
        "summary": "Create a change stream.",
        "operationId": "createChangeStream",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReadableStream"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "options",
            "in": "formData"
          }
        ],
        "summary": "Create a change stream.",
        "operationId": "createChangeStream",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/login": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "required": true,
            "name": "credentials",
            "in": "body"
          },
          {
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "name": "include",
            "description": "Related objects to include in the response. See the description of return value for more details.",
            "in": "query"
          }
        ],
        "summary": "Login a user with username/email and password.",
        "operationId": "login",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/logout": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Logout a user with access token",
        "operationId": "logout",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/confirm": {
      "get": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "uid",
            "in": "query"
          },
          {
            "type": "string",
            "required": true,
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "required": false,
            "name": "redirect",
            "in": "query"
          }
        ],
        "summary": "Confirm a user registration with email verification token",
        "operationId": "confirm",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Customers/reset": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "required": true,
            "name": "options",
            "in": "body"
          }
        ],
        "summary": "Reset password for a user with email",
        "operationId": "resetPassword",
        "tags": [
          "Customers"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/inventory": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Inventory"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query"
          }
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "find",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "name": "data",
            "description": "Model instance data",
            "in": "body"
          }
        ],
        "summary": "Update an existing model instance or insert a new one into the data source.",
        "operationId": "upsert",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "name": "data",
            "description": "Model instance data",
            "in": "body"
          }
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "create",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/inventory/{id}/exists": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "type": "boolean"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "exists",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/inventory/{id}": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "name": "data",
            "description": "An object of model property name/value pairs",
            "in": "body"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "PersistedModel id",
            "in": "path"
          }
        ],
        "summary": "Update attributes for a model instance and persist it into the data source.",
        "operationId": "prototype.updateAttributes",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Delete a model instance by id from the data source.",
        "operationId": "deleteById",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          },
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields and include",
            "in": "query"
          }
        ],
        "summary": "Find a model instance by id from the data source.",
        "operationId": "findById",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "head": {
        "responses": {
          "200": {
            "schema": {
              "type": "boolean"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Model id",
            "in": "path"
          }
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "exists",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/inventory/findOne": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query"
          }
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "findOne",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/inventory/update": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          },
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "name": "data",
            "description": "An object of model property name/value pairs",
            "in": "body"
          }
        ],
        "summary": "Update instances of the model matched by where from the data source.",
        "operationId": "updateAll",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/inventory/count": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "format": "double",
              "type": "number"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          }
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "count",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/inventory/change-stream": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReadableStream"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "options",
            "in": "query"
          }
        ],
        "summary": "Create a change stream.",
        "operationId": "createChangeStream",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ReadableStream"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "options",
            "in": "formData"
          }
        ],
        "summary": "Create a change stream.",
        "operationId": "createChangeStream",
        "tags": [
          "inventory"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations/{id}/inventory/{fk}": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "fk",
            "description": "Foreign key for inventory",
            "in": "path"
          },
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "name": "data",
            "in": "body"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Location id",
            "in": "path"
          }
        ],
        "summary": "Update a related item by id for inventory.",
        "operationId": "prototype.__updateById__inventory",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "fk",
            "description": "Foreign key for inventory",
            "in": "path"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Location id",
            "in": "path"
          }
        ],
        "summary": "Delete a related item by id for inventory.",
        "operationId": "prototype.__destroyById__inventory",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "fk",
            "description": "Foreign key for inventory",
            "in": "path"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Location id",
            "in": "path"
          }
        ],
        "summary": "Find a related item by id for inventory.",
        "operationId": "prototype.__findById__inventory",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations/{id}/inventory": {
      "delete": {
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "200": {
            "description": "No response was specified"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Location id",
            "in": "path"
          }
        ],
        "summary": "Deletes all inventory of this model.",
        "operationId": "prototype.__delete__inventory",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "required": false,
            "name": "data",
            "in": "body"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Location id",
            "in": "path"
          }
        ],
        "summary": "Creates a new instance in inventory of this model.",
        "operationId": "prototype.__create__inventory",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Inventory"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Location id",
            "in": "path"
          }
        ],
        "summary": "Queries inventory of Location.",
        "operationId": "prototype.__get__inventory",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations/{id}/inventory/count": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "format": "double",
              "type": "number"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "where",
            "description": "Criteria to match model instances",
            "in": "query"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "description": "Location id",
            "in": "path"
          }
        ],
        "summary": "Counts inventory of Location.",
        "operationId": "prototype.__count__inventory",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    },
    "/Locations": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Location"
              },
              "type": "array"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "format": "JSON",
            "type": "string",
            "required": false,
            "name": "filter",
            "description": "Filter defining fields, where, include, order, offset, and limit",
            "in": "query"
          }
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "find",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "required": false,
            "name": "data",
            "description": "Model instance data",
            "in": "body"
          }
        ],
        "summary": "Update an existing model instance or insert a new one into the data source.",
        "operationId": "upsert",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "description": "Request was successful"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Location"
            },
            "required": false,
            "name": "data",
            "description": "Model instance data",
            "in": "body"
          }
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "create",
        "tags": [
          "Locations"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Cars"
    },
    {
      "name": "Customers"
    },
    {
      "name": "inventory"
    },
    {
      "name": "Locations"
    },
    {
      "name": "notes"
    }
  ],
  "info": {
    "title": "REST APIs for loopback-example-app",
    "version": "3.1.0"
  },
  "swagger": "2.0",
  "basePath": "/api"
}
